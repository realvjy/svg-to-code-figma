#!/usr/bin/env node
'use strict';

var fs = require('fs');
var argv = require('yargs').argv;
var svgtojsx = require('../index.js');

var help = argv.h || argv.help;
if (help) {
    console.log('svg-to-jsx [options] [input filename]');
    console.log('');
    console.log('options:');
    console.log('\t-h, --help\tDisplay this help screen.');
    console.log('\t-o, --output\tOutput filename. if not provided, output will be spit out to stdout.');
    console.log('\t-p, --pass\tPass this.props to the root JSX tag.');
    console.log('\t-r, --root\tID of an SVG element to output.');
    console.log('\t-c, --renderChildren\tRender this.props.children. Can also be a string value - ID of an element to render children into.');
    console.log('\t    --refs\t<key>=<value> pair(s) of key (SVG element ID) and value (JSX ref value), e.g. --refs root=myRef will result in element #root to have attribute ref="myRef".');

    process.exit(0);
}

var inputFilename = argv._ && argv._[0];
var outputFilename = argv.o || argv.output;

if (!inputFilename) throw new Error('Input file not specified');
if (!fs.existsSync(inputFilename)) throw new Error('Input file ' + inputFilename + ' does not exist');

var svg = fs.readFileSync(inputFilename);
var options = {
    passProps: argv.p || argv.pass,
    renderChildren: argv.c || argv.renderChildren,
    root: argv.r || argv.root,
    refs: argv.refs && argv.refs.reduce(function(hash, refDefinition) {
        var keyValue = refDefinition.split('=');
        var id = keyValue[0];
        var ref = keyValue[1];

        hash[id] = ref;

        return hash;
    }, {})
};

svgtojsx(svg, options, function(error, jsx) {
    if (error) throw error;

    if (outputFilename) {
        fs.writeFileSync(outputFilename, jsx);
    } else {
        process.stdout.write(jsx + '\n');
    }
});
